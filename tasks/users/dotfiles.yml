---
- name: "Install dotfiles for {{ user.name }}"
  block:
    - name: "Create dotfiles backup directory for {{ user.name }}"
      file:
        path: "/Users/{{ user.name }}/.dotfiles_bak/{{ ansible_date_time.date }}"
        recurse: yes
        state: directory

    - name: "Copy existing dotfiles directory for {{ user.name }} to dotfiles backup directory"
      raw: "[ -d /Users/{{ user.name }}/.dotfiles ] && cp -Rf /Users/{{ user.name }}/.dotfiles /Users/{{ user.name }}/.dotfiles_bak/{{ ansible_date_time.date }} || echo 0"

    - name: "Clone {{ user.name }}'s dotfiles"
      git:
        repo: "{{ user.dotfiles }}"
        dest: "/Users/{{ user.name }}/.dotfiles"
        recursive: no
        accept_hostkey: yes
        update: yes
        force: yes

    - name: "Copy existing dotfiles files for {{ user.name }} to dotfiles backup directory"
      raw: "cd /Users/{{ user.name }}/.dotfiles && for i in $(ls -A); do [ -e /Users/{{ user.name }}/$i ] && cp -PRu /Users/{{ user.name }}/$i /Users/{{ user.name }}/.dotfiles_bak/{{ ansible_date_time.date }}/ || echo 0 ; done"

    - name: "Remove existing dotfiles files from {{ user.name }}'s home directory"
      raw: "cd /Users/{{ user.name }}/.dotfiles && for i in $(ls -A); do [ -e /Users/{{ user.name }}/$i ] && rm -rf /Users/{{ user.name }}/$i || echo 0 ; done"

    - name: "Link dotfiles in {{ user.name }}'s home directory"
      raw: "cd /Users/{{ user.name }}/.dotfiles && stow ."

  become: yes
  become_user: "{{ user.name }}"
  when: user.dotfiles is defined and user_dotfiles_exists != True